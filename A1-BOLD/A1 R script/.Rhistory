library(bold)
library("bold")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sangerseqR")
remotes::install_github("ropensci/bold")
BiocManager::install("sangerseqR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sangerseqR")
remotes::install_github("ropensci/bold")
install.packages("remotes")
remotes::install_github("ropensci/bold")
library(bold)
library(vegan)
#Let's try running a few lines of code similar to the class 1 script. What are we doing here? Predict what this line will do before you run it.
y <- c(1:10)
y
z <- 1:10
z
my_vector = c(1:20)
print(j)
j <- i + 10
#This for loop is from the base R cheat sheet.
for (i in 1:4) {
j <- i + 10
print(j)
}
cad_DNA <- c(1:100)
cad_DNA
for(x in 1:40){
cad_sample = c(sample(cad_DNA,30))
print(cad_sample)
}
for(x in 1:40){
cad_sample = c(sample(cad_DNA,30)) #choosing 30 random samples from 100 DNA for sequencing
print("this is DNA from pond", x, cad_sample)
}
print("this is DNA from pond", x,cad_sample)
for(x in 1:40){
cad_sample = c(sample(cad_DNA,30)) #choosing 30 random samples from 100 DNA for sequencing
print("this is DNA from pond", x)
cad_sample
}
for(x in 1:40){
cad_sample = c(sample(cad_DNA,30)) #choosing 30 random samples from 100 DNA for sequencing
print("this is DNA from pond", x)
cad_sample
}
for(x in 1:40){
cad_sample = c(sample(cad_DNA,30)) #choosing 30 random samples from 100 DNA for sequencing
print("this is DNA from pond", x)
print(cad_sample)
}
ponds <- sample(1:200,size=40)
ponds
lenght(ponds)
ponds <- sample(1:200,size=40)
ponds
length(ponds)
ponds <- sample(1:100,size=40)
ponds
length(ponds)
ponds <- sample(1:100,size=30)
ponds
length(ponds)
#Another method?
ponds <- sample(1:100,size=40)
ponds <- sample(1:100,size=40)
ponds
length(ponds)
for(x in 1:40){
cad_sample = c(sample(1:100,30)) #choosing 30 random samples from 100 DNA for sequencing
}
for(x in 1:40){
cad_sample = c(sample(1:100,30)) #choosing 30 random samples from 100 DNA for sequencing
}
for(x in 1:40){
cad_sample = sample(c(1:100,30)) #choosing 30 random samples from 100 DNA for sequencing
}
for(x in 1:40){
cad_sample = c(sample(1:100,30)) #choosing 30 random samples from 100 DNA for sequencing
print(cad_sample)
}
for(x in 1:40){
cad_sample = c(sample(1:100,30)) #choosing 30 random samples from 100 DNA for sequencing
print(paste("This is DNA from pond", x))
print(cad_sample)
}
for(x in 1:40){
cad_sample = c(sample(1:100,30)) #choosing 30 random samples from 100 DNA for sequencing
print(paste("This is 30 DNA Sequences from pond", x))
print(cad_sample)
}
for(x in 1:40){
cad_sample = sample(1:100,30) #choosing 30 random samples from 100 DNA for sequencing
print(paste("This is 30 DNA Sequences from pond", x))
print(cad_sample)
}
num_ponds <- 40
num_caddisflies_per_pond <- 100
num_selected_caddisflies <- 30
# Create a list to store selected caddisflies for each pond
selected_caddisflies <- list()
# Loop over each pond
for (pond in 1:num_ponds) {
# Create an ID for each caddisfly in the pond (1 to 100)
caddisflies <- 1:num_caddisflies_per_pond
# Randomly select 30 caddisflies from the 100
selected <- sample(caddisflies, num_selected_caddisflies)
# Store the selected caddisflies in the list
selected_caddisflies[[paste("Pond", pond)]] <- selected
}
# Print the selected caddisflies for each pond
print(selected_caddisflies)
for(x in 1:40){
pond_samples = sample(1:100,30) #choosing 30 random samples from 100 DNA for sequencing
print(paste("This is 30 DNA Sequences for Pond:", x)) #printing the Pond #
print(pond_samples)
}
#Method 2
for x in (1:40){
#Method 2
for (x in 1:40){
print(sample(1:100,30))
}
data <- matrix (0, nrow = 40, ncol=30)
data <- matrix (0, nrow = 40, ncol=30)
View(data)
for (x in 1:40){
data[x,](sample(1:100,30)) #we don't have anything in second index bc we want to assignment
}
View(data)
for (x in 1:40){
data[x,](sample(1:100,30)) #we don't have anything in second index bc we want to assignment
}
for (x in 1:40){
p_samples[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
#Method 3
flies <- 1:100
sample_size <-30
flies <- 1:100
sample_size <-30
p_samples<- matrix (0, nrow = 40, ncol=30)
for (x in 1:40){
p_samples[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
for (x in 1:40){
p_samples[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
View(p_samples)
specimen.selection<- matrix (0, nrow = 40, ncol=30)
for (x in 1:40){
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
View(specimen.selection)
View(specimen.selection)
View(p_samples)
View(specimen.selection)
specimen.selection<- matrix(0, nrow = 40, ncol=23) #empty data file to put data in.
for (x in 1:40){
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
sample_size <-21
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
sample_size <-23
specimen.selection<- matrix(0, nrow = 40, ncol=23) #empty data file to put data in.
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
for (x in 1:40){
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
View(specimen.selection)
sample_size <-30
specimen.selection<- matrix(0, nrow = 40, ncol=sample_size) #empty data file to put data in.
specimen.selection[x,sample_siz] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
specimen.selection[x,sample_size] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
for (x in 1:40){
specimen.selection[x,sample_size] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
for (x in 1:40){
specimen.selection[x,sample_size+1] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
specimen.selection[x,sample_size] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
sample_size <-30
specimen.selection<- matrix(0, nrow = 40, ncol=sample_size) #empty data file to put data in.
for (x in 1:40){
specimen.selection[x,sample_size] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
for (x in 1:40){
specimen.selection[x,] = sample(flies,sample_size) #we don't have anything in second index bc we want to assignment
}
library("swirl")
swirl()
1:20
pi:20
pi:10
15:1
:
>:
?:
:?
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,lenth=30)
my_seq <- seq(5,10,length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("My","name", "is")
my_char
paste(my_char,collapse = " ")
c(my_char, "anne")
my_name <- c(my_char, "anne")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = " ")
paste(1:3,c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- vector c(44,NA,5,NA)
x <- c(44,NA,5,NA)
x*3
y<- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
atrributes(my_vector)
atributes(my_vector)
atribute(my_vector)
attributes(my_vector)
my_vector
class(my_Vector)
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2<- matrx(data = 1:20, nrow = 4, ncol,5)
my_matrix2<- matrix(data = 1:20, nrow = 4, ncol,5)
my_matrix2<- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix2)
identical(my_matrix2,my_matrix)
patient <- c("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <-data.frame(patients, my_matrix)
View(my_data)
my_data
class(my_Data)
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
dim(cames)
dim(cnames)
colnames(my_data)
colnames(my_data) <-cnames
my_data
soil.nitrogen <- c(45, 30, 20, 16, 18, 32, 48, 33)
length(soil.nitrogen)
class(soil.nitrogen)
plant.model <- lm(plant.height ~ soil)
?lm
plant.height <- c(50, 42, 33, 5, 8, 35, 48, 31)
plant.model <- lm(plant.height ~ soil.nitrogen)
summary(plant.model)
?lm
swirl()
swirl()
library("swirl")
swirl()
x <- c(44,NA,5,NA)
x*3
0
0
quit
rnorm(1000)
y<-rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <-is.na()
is.na(my_na)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_Data
my_data
0/0
inf/inf
Inf/Inf
Inf-Inf
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!TRUE 5,7
7 !TRUE 5
!TRUE 5
!TRUE
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <-sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(ints>0)
# solution 2
for (i in 1:40){
sample(1:100, 30)
}
# solution 2
for (i in 1:40){
sample(1:100, 30)
}
library(tidyverse)
library(viridis)
?!
?lapply(list, function)
?lapply
# solution 3
1:40 %>%
lapply(function(x) sample(1:100, 30))
# solution 3
1:40 %>%
lapply(function(x) sample(1:100, 30))
## _ Packages used -------
library(stats)
library(viridis)
1:40 %>%
lapply(function(x) sample(1:100, 30))
install.packages("magrittr")  # or dplyr
install.packages("magrittr")
---
title: "Assignment 1: Using BOLD"
setwd("~/Desktop/no signal/bioinfo!!/software tools /assignments/A1.VP-BOLD/A1 R script")
